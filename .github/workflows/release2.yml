name: Release2
run-name: "TEST: testing new release workflow"

env:
  APPLICATION: "erigon"
  GOLANG_BUILDER_VERSION: "1.22-bookworm"
  TARGET_BASE_VERSION: "bookworm-20240722"
  PACKAGE_NAME: "github.com/erigontech/erigon"
  DOCKERHUB_REPOSITORY: "erigontech/dev-erigon"
  BUILD_TAGS: "nosqlite,noboltdb,nosilkworm"
  VERSION: "2.65.4"
  VERSION_TMP: ".."

on:
  push:
    #branches-ignore:
    #  - '**'
    branches:
      - 'feature/issue-7893'
    tags:
      ## only trigger on release tags:
      #- 'v*.*.*'
      #- 'v*.*.*-*'
  workflow_dispatch:

jobs:
  build-and-push-binaries:
    runs-on: ubuntu-latest
    name: build ${{ matrix.arch }}
    strategy:
      matrix:
        include:
          - arch: linux/amd64/v2
            id: linux-amd64-v2
            goos: linux
            goarch: amd64
            flags_cc: x86_64-linux-gnu-gcc
            flags_cxx: x86_64-linux-gnu-g++
            build_dst: build-linux-amd64
          - arch: linux/arm64
            id: linux-arm64
            goos: linux
            goarch: arm64
            flags_cc: aarch64-linux-gnu-gcc
            flags_cxx: aarch64-linux-gnu-g++
            build_dst: build-linux-arm64

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix git CVE-2022-24765
        run: git config --global --add safe.directory $(pwd)

      - name: Get current timestamp
        id: current_ts
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Get version from Github tag
        id: GetVersion
        run: echo ver=$( echo ${{ github.ref_name }} | sed -e 's,.*\/,,g' ) >> $GITHUB_OUTPUT

      - name: Get short last commit id
        id: GetShortCommitId
        run: echo "short_commit_id=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_REPOSITORY }}
          tags: |
            type=match,enable=true,priority=800,prefix=,suffix=,pattern=feature(.*),group=0,value=${{ steps.GetShortCommitId.outputs.short_commit_id }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Debug output 1
        run: |
          pwd
          ls -lao .
          echo {GITHUB_REF#refs/tags/} > _local_GITHUB_TAG
          docker images

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build binaries for ${{ matrix.arch }} platform
        run: |
          docker run --platform ${{ matrix.arch }} --rm -e GOOS=${{ matrix.goos }} -e GOARCH=${{ matrix.goarch }} -e CC=${{ matrix.flags_cc }} -e CXX=${{ matrix.flags_cxx }} -w /erigon -v $(pwd):/erigon -v $(pwd)/${{ matrix.build_dst }}:/erigon/build/bin golang:${{ env.GOLANG_BUILDER_VERSION }} make

      - name: Build and push docker image for ${{ matrix.arch }} platform
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.NEW-2
          platforms: ${{ matrix.arch }}
          build-args: |
            BUILD_DST=${{ matrix.build_dst }}
            GOLANG_BUILDER_VERSION=${{ env.GOLANG_BUILDER_VERSION }}
            TARGET_BASE_VERSION=${{ env.TARGET_BASE_VERSION }}
            BUILD_TAGS=${{ env.BUILD_TAGS }}
            BUILD_TIMESTAMP=${{ steps.current_ts.outputs.date }}
            VCS_REF_SHORT=${{ steps.GetShortCommitId.outputs.short_commit_id }}
            VCS_REF_LONG=${{ github.sha }}
            VERSION=${{ steps.GetVersion.outputs.ver }}
          outputs: type=image,name=${{ env.DOCKERHUB_REPOSITORY }},push-by-digest=true,name-canonical=true,push=true
          #tags: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.GetVersion.outputs.ver }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"          
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.id }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build-and-push-binaries
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version from Github tag
        id: GetVersion
        run: echo ver=$( echo ${{ github.ref_name }} | sed -e 's,.*\/,,g' ) >> $GITHUB_OUTPUT
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        tags: |
          type=match,enable=true,priority=800,prefix=,suffix=,pattern=feature(.*),group=0,value=${{ steps.GetShortCommitId.outputs.short_commit_id }}
        with:
          images: ${{ env.DOCKERHUB_REPOSITORY }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_REPOSITORY }}@sha256:%s ' *)          
      
      - name: Inspect image
        run: |
          echo "buildx imagetools inspect output"
          docker buildx imagetools inspect ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}
          docker image rm ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}
          echo "Inspecting image with platform linux/amd64"
          docker pull --platform linux/amd64 ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}
          docker inspect ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.meta.outputs.version }}

