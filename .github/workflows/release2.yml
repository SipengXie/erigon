name: Release2
run-name: "TEST: testing new release workflow"

env:
  APPLICATION: "erigon"
  PACKAGE_NAME: "github.com/erigontech/erigon"
  DOCKERHUB_REPOSITORY: "erigontech/dev-erigon"
  DOCKER_REG_USERNAME: "user"
  DOCKER_REG_PASSWORD: "password"
  GORELEASER_CROSS_VERSION: "v1.22.4"
  ALPINE_BASE_IMAGE_VERSION: "3.20.1"
  VERSION: "2.65.4"
  VERSION_TMP: ".."

on:
  push:
    #branches-ignore:
    #  - '**'
    branches:
      - 'feature/issue-7893'
    tags:
      ## only trigger on release tags:
      #- 'v*.*.*'
      #- 'v*.*.*-*'
  workflow_dispatch:

jobs:
  build-and-deploy-release:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Debug output 1
        run: |
          echo {GITHUB_REF#refs/tags/} > _local_GITHUB_TAG
          docker images

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_ERIGONTECH_TOKEN }}

      - name: Get version from Github tag
        id: GetVersion
        run: echo ver=$( echo ${{ github.ref_name }} | sed -e 's,.*\/,,g' ) >> $GITHUB_OUTPUT

#      - name: Run goreleaser container
#        run: |
#          docker run \
#            --rm \
#            --privileged \
#            -e CGO_ENABLED=1 \
#            -e GITHUB_TOKEN \
#            -e DOCKER_USERNAME \
#            -e DOCKER_PASSWORD \
#            -v /var/run/docker.sock:/var/run/docker.sock \
#            -v `pwd`:/go/src/${PACKAGE_NAME} \
#            -w /go/src/${PACKAGE_NAME} \
#            ghcr.io/goreleaser/goreleaser-cross:${GORELEASER_CROSS_VERSION} \
#            build --clean --skip=validate --verbose

      - name: Debug output 2
        run: |
          find ./dist -ls && true
          echo "Content of dist/artifacts.json"
          jq . dist/artifacts.json && true
          echo "-- end of content --"
          docker buildx ls
          echo docker buildx build --platform linux/amd64 -t ${{ env.DOCKER_REG_ADDRESS }}/${{ env.APPLICATION }}:${{ steps.GetVersion.outputs.ver }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push docker image for linux/amd64
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile.linux-amd64
          platforms: linux/amd64
          build-args: |
            ALPINE_BASE_IMAGE_VERSION=${{ env.ALPINE_BASE_IMAGE_VERSION }}
          push: true
          tags: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.GetVersion.outputs.ver }}

      - name: Build and push docker image for linux/arm64
        uses: docker/build-push-action@v6
        with:
          file: ./docker/Dockerfile.linux-arm64
          platforms: linux/arm64
          build-args: |
            ALPINE_BASE_IMAGE_VERSION=${{ env.ALPINE_BASE_IMAGE_VERSION }}
          push: true
          tags: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.GetVersion.outputs.ver }}

      - name: Debug output 3
        run: |
          echo "Pulling docker images for two platforms:"
          docker pull --platform linux/amd64 docker.io/erigontech/dev-erigon:issue-7893
          docker pull --platform linux/arm64 docker.io/erigontech/dev-erigon:issue-7893
          echo List of docker image architecture and tags
          docker image inspect --format "{{.Architecture}} {{.RepoTags}}" $(docker image ls -q)