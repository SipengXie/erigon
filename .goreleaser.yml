version: 2

project_name: erigon

release:
  disable: false
  draft: true
  prerelease: auto

env:
  - DeploymentSuffix="-DEV"

builds:

## Darwin AMD64:
  - id: darwin-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-amd64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-amd64-devnet
    main: ./cmd/devnet
    binary: devenet
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-amd64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-amd64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ darwin ]
    goarch: [ amd64 ]
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

## END of Darwin AMD64.

## Darwin ARM64:
  - id: darwin-arm64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-arm64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-arm64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-arm64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: darwin-arm64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ darwin ]
    goarch: [ arm64 ]
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w
## END of Darwin ARM64.

## Linux AMD64:
  - id: linux-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

## End of Linux AMD64.

## Linux ARM64
  - id: linux-arm64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

## End of Linux ARM64.

## Windows AMD64
  - id: windows-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: windows-amd64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: windows-amd64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: windows-amd64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

  - id: windows-amd64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ windows ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w

## End of Windows AMD64

archives:
  - id: windows-amd64
    builds:
    - windows-amd64-erigon
    - windows-amd64-downloader
    - windows-amd64-devnet
    - windows-amd64-evm
    - windows-amd64-caplin
    wrap_in_directory: true
    strip_binary_parent_dir: true
    files:
      - COPYING
      - README.md
    format: zip

  - id: linux-arm64
    builds:
    - linux-arm64-erigon
    - linux-arm64-downloader
    - linux-arm64-devnet
    - linux-arm64-evm
    - linux-arm64-caplin
    wrap_in_directory: true
    strip_binary_parent_dir: true
    files:
      - COPYING
      - README.md
    format: tar.gz

  - id: linux-amd64
    builds:
    - linux-amd64-erigon
    - linux-amd64-downloader
    - linux-amd64-devnet
    - linux-amd64-evm
    - linux-amd64-caplin
    wrap_in_directory: true
    strip_binary_parent_dir: true
    files:
      - COPYING
      - README.md
    format: tar.gz

snapshot:
  name_template: "{{ .Tag }}.next"

dockers:
  - image_templates:
      - thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-amd64
    dockerfile: Dockerfile.NEW
    use: buildx
    skip_push: true
    goarch: amd64
    ids:
      - linux-amd64
    build_flag_templates:
      - --platform=linux/amd64

  - image_templates:
      - thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-arm64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-arm64
    dockerfile: Dockerfile.NEW
    skip_push: true
    use: buildx
    goarch: arm64
    ids:
      - linux-arm64
    build_flag_templates:
      - --platform=linux/arm64/v8

docker_manifests:
  - name_template: thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}
    skip_push: true
    image_templates:
      - thorax/{{ .ProjectName }}:{{ .Version }}-amd64
      - thorax/{{ .ProjectName }}:{{ .Version }}-arm64

  - name_template: ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}
    skip_push: true
    image_templates:
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-arm64

  - name_template: thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:latest
    skip_push: true
    image_templates:
      - thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-amd64
      - thorax/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-arm64

  - name_template: ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:latest
    skip_push: true
    image_templates:
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-amd64
      - ghcr.io/ledgerwatch/{{ .ProjectName }}{{ .DeploymentSuffix }}:{{ .Version }}-arm64

announce:
  slack:
    enabled: false
    # The name of the channel that the user selected as a destination for webhook messages.
    channel: '#code-releases'
