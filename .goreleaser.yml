#version: 2

project_name: erigon

release:
  disable: true
  draft: true
  prerelease: auto

env:
  - CGO_ENABLED=1
  - BUILD_VERSION={{ .Env.BUILD_VERSION }}
  - GIT_COMMIT={{ .Env.GIT_COMMIT }}
  - GIT_BRANCH={{ .Env.GIT_BRANCH }}
  - GIT_TAG={{ .Env.GIT_TAG }}
  - DARWIN_LDFLAGS="-O3 -g -mmacosx-version-min=13.3"
  - PACKAGE={{ .Env.PACKAGE }}
  - GO_FLAGS=-trimpath -buildvcs=false -ldflags "-X {{ .Env.PACKAGE }}/params.GitCommit={{ .Env.GIT_COMMIT }} -X {{ .Env.PACKAGE }}/params.GitBranch={{ .Env.GIT_BRANCH }} -X {{ .Env.PACKAGE }}/params.GitTag={{ .Env.GIT_TAG }}"

builds:


## Linux AMD64:
  - id: linux-amd64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-amd64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ linux ]
    goarch: [ amd64 ]
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

## End of Linux AMD64.

## Linux ARM64
  - id: linux-arm64-erigon
    main: ./cmd/erigon
    binary: erigon
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-downloader
    main: ./cmd/downloader
    binary: downloader
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-devnet
    main: ./cmd/devnet
    binary: devnet
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-evm
    main: ./cmd/evm
    binary: evm
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

  - id: linux-arm64-caplin
    main: ./cmd/caplin
    binary: caplin
    goos: [ linux ]
    goarch: [ arm64 ]
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - GO_FLAGS={{ .Env.GO_FLAGS }}
    tags: [ nosqlite, noboltdb, nosilkworm ]
    ldflags: -s -w -extldflags "-static" # We need to build a static binary because we are building in a glibc based system and running in a musl container

## End of Linux ARM64.


checksum:
  name_template: "{{ .ProjectName }}_{{ .Env.BUILD_VERSION }}_checksums.txt"
  algorithm: sha256
  ids:
    - linux-arm64
    - linux-amd64


archives:
  - id: linux-arm64
    builds:
      - linux-arm64-erigon
      - linux-arm64-downloader
      - linux-arm64-devnet
      - linux-arm64-evm
      - linux-arm64-caplin
    name_template: "{{ .ProjectName }}_{{ .Env.BUILD_VERSION }}_{{ .Os }}_{{ .Arch }}"
    wrap_in_directory: true
    format: tar.gz

  - id: linux-amd64
    builds:
      - linux-amd64-erigon
      - linux-amd64-downloader
      - linux-amd64-devnet
      - linux-amd64-evm
      - linux-amd64-caplin
    name_template: "{{ .ProjectName }}_{{ .Env.BUILD_VERSION }}_{{ .Os }}_{{ .Arch }}"
    wrap_in_directory: true
    format: tar.gz



dockers:
  - dockerfile: Dockerfile.NEW-gr
    use: buildx
    goarch: amd64
    goos: linux
    ids:
      - linux-amd64-erigon
      - linux-amd64-downloader
      - linux-amd64-devnet
      - linux-amd64-evm
      - linux-amd64-caplin
    build_flag_templates:
      - --platform=linux/amd64
      - --label=org.opencontainers.image.title={{ .ProjectName }}
      - --label=org.opencontainers.image.description={{ .Env.LABEL_DESCRIPTION }}
      - --label=org.opencontainers.image.url={{ .Env.PACKAGE }}
      - --label=org.opencontainers.image.source={{.GitURL}}
      - --label=org.opencontainers.image.vcs-ref={{ .Env.GIT_COMMIT }}
      - --label=org.opencontainers.image.created={{ time "2006-01-02T15:04:05Z07:00" }}
      - --label=org.opencontainers.image.revision={{ .Env.GIT_COMMIT }}
      - "--build-arg=TARGET_BASE_VERSION={{.Env.TARGET_BASE_VERSION}}"
    image_templates:
      - '{{ .Env.DOCKER_URL }}:{{ .Env.BUILD_VERSION }}-amd64'
  - dockerfile: Dockerfile.NEW-gr
    use: buildx
    goarch: arm64
    goos: linux
    ids:
      - linux-arm64-erigon
      - linux-arm64-downloader
      - linux-arm64-devnet
      - linux-arm64-evm
      - linux-arm64-caplin
    build_flag_templates:
      - --platform=linux/arm64
      - --label=org.opencontainers.image.title={{ .ProjectName }}
      - --label=org.opencontainers.image.description={{ .Env.LABEL_DESCRIPTION }}
      - --label=org.opencontainers.image.url={{ .Env.PACKAGE }}
      - --label=org.opencontainers.image.source={{.GitURL}}
      - --label=org.opencontainers.image.vcs-ref={{ .Env.GIT_COMMIT }}
      - --label=org.opencontainers.image.created={{ time "2006-01-02T15:04:05Z07:00" }}
      - --label=org.opencontainers.image.revision={{ .Env.GIT_COMMIT }}
      - "--build-arg=TARGET_BASE_VERSION={{.Env.TARGET_BASE_VERSION}}"
    image_templates:
      - '{{ .Env.DOCKER_URL }}:{{ .Env.BUILD_VERSION }}-arm64'

docker_manifests:
  - name_template: "{{ .Env.DOCKER_IMAGE }}:{{ .Env.BUILD_VERSION }}"
    image_templates:
      - "{{ .Env.DOCKER_URL }}:{{ .Env.BUILD_VERSION }}"
      - "{{ .Env.DOCKER_URL }}:{{ .Env.BUILD_VERSION }}"